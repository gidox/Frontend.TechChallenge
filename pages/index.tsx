/* eslint-disable react-hooks/exhaustive-deps */
import type { NextPage } from "next";

import { AiOutlineSearch } from "react-icons/ai";
import { FaTimesCircle } from "react-icons/fa";
import { useInView } from "react-intersection-observer";
import Head from "next/head";
import { Fragment, useEffect, useState } from "react";

import MainLayout from "../components/MainLayout";
import PokemonCard from "../components/PokemonCard";
import usePokemons, { Pokemon } from "../hooks/usePokemons";
import Button from "../components/Button";
import PokemonSearchDialog from "../components/PokemonSearchDialog";
import Title from "../components/Title";

const Home: NextPage = () => {
  const { ref, inView } = useInView();
  const [pokemonFilter, setPokemonFilter] = useState<Pokemon | null>(null);
  const [isPokemonSearchDialogOpen, setIsPokemonSearchDialogOpen] =
    useState<boolean>(false);
  const {
    data: pokemonData,
    isFetchingNextPage,
    fetchNextPage,
    hasNextPage,
    refetch,
    error,
    status,
  } = usePokemons();

  useEffect(() => {
    if (inView) {
      fetchNextPage();
    }
  }, [inView]);

  const handlePokemonDialogOpen = () => {
    setIsPokemonSearchDialogOpen(true);
  };
  const handleClosePokemonDialogOpen = (pokemonSelected?: Pokemon) => {
    setIsPokemonSearchDialogOpen(false);
    if (pokemonSelected) {
      setPokemonFilter(pokemonSelected);
      refetch();
    }
  };

  const handleRemoveFilter = () => {
    setPokemonFilter(null);
  };

  return (
    <MainLayout>
      <PokemonSearchDialog
        isOpen={isPokemonSearchDialogOpen}
        onClose={handleClosePokemonDialogOpen}
      />
      <Head>
        <meta content="Generated by create next app" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <div className="flex justify-between items-center mb-8">
        <Title text="Pokemons" />

        <div>
          <Button
            className="gap-2 "
            variant="secondary"
            onClick={handlePokemonDialogOpen}
          >
            <AiOutlineSearch /> Search Pokemon
          </Button>
        </div>
      </div>
      {pokemonFilter && (
        <div className="flex">
          <button
            className="flex items-center gap-2 text-blue-800 dark:text-white"
            onClick={handleRemoveFilter}
          >
            {` Filtered by pokemon: ${pokemonFilter.name.toUpperCase()}`}
            <FaTimesCircle />
          </button>
        </div>
      )}
      {pokemonFilter && <PokemonCard maxWidth name={pokemonFilter.name} />}

      {status === "loading" ? (
        <p className="text-muted text-lg font-bold dark:text-white">
          Loading...
        </p>
      ) : status === "error" ? (
        <span>Error: {JSON.stringify(error)}</span>
      ) : (
        !pokemonFilter && (
          <>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {pokemonData &&
                pokemonData.pages.map((group, i) => (
                  <Fragment key={i}>
                    {group?.results.map((pokemon) => (
                      <PokemonCard key={pokemon.name} name={pokemon.name} />
                    ))}
                  </Fragment>
                ))}
            </div>
            <div>
              <button
                ref={ref}
                className={
                  "flex items-center justify-center w-full px-10 py-4 text-base font-medium text-center text-white transition duration-500 ease-in-out transform bg-blue-600 rounded-xl hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 my-8"
                }
                disabled={!hasNextPage || isFetchingNextPage}
                onClick={() => fetchNextPage()}
              >
                {isFetchingNextPage
                  ? "Loading more..."
                  : hasNextPage
                  ? "Load Newer"
                  : "Nothing more to load"}
              </button>
            </div>
          </>
        )
      )}
    </MainLayout>
  );
};

export default Home;
